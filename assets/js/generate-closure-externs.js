(function (global) {

    const FUNCTION = 'FUNCTION';

    const entries = (obj, cycles, f = FUNCTION) => {
        const tree = {};
        const checkCycle = (obj, key) => cycles.find(([o, k]) => obj === o && key === k);
        Object.entries(obj).forEach(([key, value]) => {
            if (checkCycle(obj, key)) {
                return;
            } else if (typeof value === 'function') {
                if (key === 'constructor') {
                    tree[key] = f;
                } else if (value.prototype) {
                    try {
                        tree[key] = entries(value.prototype, cycles, f);
                    } catch {
                        tree[key] = f;
                    }
                } else {
                    tree[key] = f;
                }
            } else if (typeof value === 'object' && value !== null) {
                tree[key] = entries(value, cycles, f);
            } else {
                tree[key] = f;
            }
        });
        return Object.entries(tree).length ? tree : f;
    }

    const detectCycles = (obj) => {
        const seenObjects = [];
        const result = [];
        const detect = (obj) => {
            if (obj && typeof obj === 'object') {
                if (seenObjects.indexOf(obj) !== -1) {
                    return true;
                }
                seenObjects.push(obj);
                for (var key in obj) {
                    if (obj.hasOwnProperty(key) && detect(obj[key])) {
                        console.info(obj, 'cycle at ' + key);
                        result.push([obj, key]);
                        return true;
                    }
                }
            }
            return false;
        }
        detect(obj);
        return result;
    };

    const download = (blob, name) => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        [a.href, a.download] = [url, name];
        a.click();
        window.URL.revokeObjectURL(url);
    };

    const save = (text) => {
        const name = prompt('name:');
        const blob = new Blob([[
            "/**",
            ` * @fileoverview Externs for ${name} generated by generate-closure-externs in browser runtime`,
            " * @see https://gist.github.com/tripolskypetr/ed33439520b59c5077cbdf5d0ff4ea62",
            " * @externs",
            " */",
            `var ${name} = ${text}`,
            ""
        ].join("\n")], { type: 'text/javascript;charset=utf-8' });
        download(blob, `${name}-externs.js`);
    };

    global.externs = (obj) => {
        const cycles = detectCycles(obj);
        const str = JSON.stringify(entries(obj, cycles));
        const trim = (v) => v.slice(v.indexOf('"') + 1, v.lastIndexOf('"'));
        const expr = /(?:")+([a-zA-Z0-9-])\w+(?:")/g;
        const text = str.replace(expr, (v) => {
            const str = trim(v);
            if (str === FUNCTION) {
                return 'function() { }';
            } else {
                return str;
            }
        });
        save(text.replace(/(\r\n|\n|\r)/gm, ""));
    }

})(window);
